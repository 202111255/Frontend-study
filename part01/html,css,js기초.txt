<요소>
block요소: 가로를 전체 차지
- div, h1, hr, p 등

inline요소: 자기 영역만큼만 차지
- span, input, img, a 등

종속 태그: 다른 태그와 상호작용해야만 사용가능
- select와 option, ol/ul/dl과 li 등


<html 문서구조>
head태그: 검색엔진을 위한 영역
- title, meta 등

body태그: 브라우저에서 보여지는 영역
- header, nav, section, article, aside, footer 등


<css 선택자>
1. * : 전체 선택자
2. tag : 태그 선택자
3. class : 클래스선택자
4. id : 아이디선택자
5. 선택자:가상상황 : 가상선택자
선택자에는 tag ⇒ class ⇒ id 순으로 우선순위가 적용된다.


<박스모델>
margin: border를 기준으로 박스의 바깥 여백
padding : 박스의 안쪽 여백
* {
        box-sizing:border-box;
        } 
-> 이렇게 두고 사용하기!


<정렬>
가장 많이 사용되는 방법
1. flex
2. position
/* 박스의 절대 위치 */
div {
    position: absolute;
    top: 0px;
    left: 0px;
}

/* 부모 박스 기준으로 상대위치 */
div {
    position: relative;
    top: 0px;
    left: 0px;
}

/* 화면을 기준으로한 절대 위치 */
div {
    position: fixed;
    bottom: 0px;
}
3. grid


<javascript 기초>
변수 (값이 변할 수 있음) : var , let
상수 (값이 변할 수 없음) : const
var은 재선언 가능, 재할당 가능 
let은 재선언 불가, 재할당 가능


<배열>
// 배열 만들기
const blanks = []                            // 비어있는 배열
const numbers = [2, 10, 7, 3.3]              // 숫자들로 이루어진 배열
const classmates = ["철수", "영희", "훈이"]     // 문자들로 이루어진 배열

// 배열의 길이 구하기 _ length
classmates.length          // 3

// 배열의 값 꺼내기
classmates[0]              // "철수"
classmates[1]              // "영희"

// 배열의 맨 뒤에 추가하기 _ push
classmates.push("민지")     // ["철수", "영희", "훈이", "민지"]

// 배열의 맨 마지막 삭제하기 _ pop
classmates.pop()          // ["철수", "영희", "훈이"]

// 배열의 요소 정렬하기, 거꾸로 뒤집기 _ sort
classmates.sort()               // ["영희", "철수", "훈이"]

// 배열이 가지고있는 데이터 확인하기 _ includes
classmates.includes("철수")     // true
classmates.includes("영구")     // false

const classmates1 = ["철수", "영희", "훈이"]
const classmates2 = ["민지", "민수"]

// 배열 2개 연결하기 _ concat
classmates1.concat(classmates2**)     // ["철수", "영희", "훈이", "민지", "민수"]

// 배열을 문자로 만들기 _ join
classmates.join(', ')     // 철수, 영희, 훈이
classmates.join("와 ")    // 철수와 영희와 훈이

// 배열 분리하기 _ splice
const classmates = ["철수", "영희", "훈이"]
classmates.splice(0, 1)     // ["철수"]

// 배열에서 원하는 요소만 뽑아내기 _ filter
classmates.filter((data) => (data === "영희"))     // ["영희"]
classmates.filter((data) => (data !== "영희"))     // ["철수", "훈이"]

// 배열에서 모든 요소 변경하기 _ map
classmates.map((data) => (data + "어린이"))         // ["철수어린이", "영희어린이", "훈이어린이"]


<문자열>
// 문자열 쪼개기
const classmates2 = "철수&영희"
classmates2.split("&")     // ["철수", "영희"]

// 문자열 양쪽 공백 제거하기
const classmates3 = " 철수 & Milk "
classmates3.trim()     // "철수 & Milk"

// 문자열에 빈칸 채우기
const chulsooNumber = "1234"
chulsooNumber.padStart(10, "0")     // "0000001234"
chulsooNumber.padEnd(10, "0")       // "1234000000"


<객체>
// 객체 선언하기
const classmate = {
	name: "철수",
	age: 8,
  school: "꽃샘초등학교"
}

// 객체의 값 꺼내기
classmate.name        // 철수
classmate['name']     // 철수

// 객체의 키&값 삭제하기
delete classmate.name
classmate = {
	age:8,
	school: "꽃샘초등학교"
}


<객체와 배열 함께 쓰기>
// 위 객체들을 깔끔하게 한줄로 적기
const classmates = [
    { name: "철수", age: 8, school: "다람쥐초등학교" },
    { name: "영희", age: 8, school: "다람쥐초등학교" },
    { name: "훈이", age: 7, school: "토끼초등학교" }
]

// 배열안의 객체에서 뽑아내기
classmates[0].name     // 철수
classmates[0].age      // 8
classmates[0].school   // 다람쥐초등학교

// 배열 안의 객체에서 원하는 객체(8살 이상)만 뽑아내기
classmates.filter((data) => (data.age >= 8))

    // classmates = [
    //    { name: "철수", age: 8, school: "다람쥐초등학교" },
    //    { name: "영희", age: 8, school: "다람쥐초등학교" },
    // ]


<자바스크립트의 비교연산자>
- === : 같다
- !== : 같지 않다
- <= : 작거나 같다
- >= : 크거나 같다
- > : 크다
- < : 작다


<DOM>
웹브라우저가 정적인 웹페이지를 변경하거나 조작하기 위해 HTML 파일을 자바스크립트 객체로 만들어준다.
제일 많이 쓰는 것
: document.getElementById("tagID").InnerText


<함수>
1. 함수 선언식
function hello(name) {
    ...
}
2. 함수 표현식
const hello = function(name) {
    ...
} 
3. 화살표 함수
const hello = (name) => {
    ...
}
화살표 "=>"이 "function"이랑 동일한 기능을 한다.


<내장함수>
자주 사용되는 함수를 자바스크립트에 내장하여 편리하게 사용할 수 있도록 한 것
1. alert
2. setTimeout(func, time) //1초에 1000ms
- 시간 지연 함수
3. setInterval(func, time)
- 시간 반복 함수

// 시간지연함수 강제종료
const time = setTimeout(기능, 시간)    // 시간지연함수를 임시로 변수/상수에 저장해놓습니다.
clearTimeout(time)              // 저장했던 시간지연함수를 종료합니다.

// 시간반복함수 강제종료
const time = setInterval(기능, 시간)   // 시간반복함수를 임시로 변수/상수에 저장해놓습니다.
clearInterval(time) 


<템플릿 리터럴>
console.log(`오늘은 ${year}년 ${month}월 ${date}일 입니다.`)
console.log(`오늘은 ${hours}시 ${minutes}분 ${seconds}초 입니다.`)


<이벤트 변경 감지>
1. onclick = "자바스크립트 함수()"
2. onchange = "자바스크립트 함수()" //해당 태그가 변경되었을 때
3. onblur = "자바스크립트 함수()" //해당 태그에서 벗어났을 때
4. oninput = "자바스크립트 함수()" //input 박스에 변경이 생길 때 마다
